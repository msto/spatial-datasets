
SAMPLES = ['P4_rep1', 'P4_rep2', 'P6_rep1', 'P6_rep2']

rule all:
    input:
        expand('data/raw/ji_GSE144239/{sample}_tissue_positions_list.csv.gz', sample=SAMPLES),
        expand('data/raw/ji_GSE144239/{sample}.counts.csv.gz', sample=SAMPLES),
        expand("data/cleaned/ji_GSE144239/{sample}.rds", sample=SAMPLES)

rule download:
    output:
        expr="data/raw/ji_GSE144239/GSE144239_ST_Visium_counts.txt.gz",
        spatial="data/raw/ji_GSE144239/GSE144239_RAW.tar",
    shell:
        """
        curl -o {output.expr} https://ftp.ncbi.nlm.nih.gov/geo/series/GSE144nnn/GSE144239/suppl/GSE144239%5FST%5FVisium%5Fcounts%2Etxt%2Egz
        curl -o {output.spatial} https://ftp.ncbi.nlm.nih.gov/geo/series/GSE144nnn/GSE144239/suppl/GSE144239_RAW.tar
        """

rule extract:
    input:
        spatial="data/raw/ji_GSE144239/GSE144239_RAW.tar",
    output:
        expand('data/raw/ji_GSE144239/{sample}_tissue_positions_list.csv.gz', sample=SAMPLES)
    params:
        outdir=lambda wildcards, input: os.path.dirname(input[0])
    shell:
        """
        tar -C {params.outdir} -xf {input.spatial};
        mv {params.outdir}/GSM4565823_P4_rep1_tissue_positions_list.csv.gz {params.outdir}/P4_rep1_tissue_positions_list.csv.gz
        mv {params.outdir}/GSM4565824_P4_rep2_tissue_positions_list.csv.gz {params.outdir}/P4_rep2_tissue_positions_list.csv.gz
        mv {params.outdir}/GSM4565825_P6_rep1_tissue_positions_list.csv.gz {params.outdir}/P6_rep1_tissue_positions_list.csv.gz
        mv {params.outdir}/GSM4565826_P6_rep2_tissue_positions_list.csv.gz {params.outdir}/P6_rep2_tissue_positions_list.csv.gz
        """

rule split_counts:
    input:
        'data/raw/ji_GSE144239/GSE144239_ST_Visium_counts.txt.gz'
    output:
        expand('data/cleaned/ji_GSE144239/{sample}.counts.csv.gz', sample=SAMPLES)
    params:
        outdir='data/cleaned/ji_GSE144239/'
    run:
        import pandas as pd
        df = pd.read_table(input[0])
        df = df.rename(columns=lambda s: s.split('_')[1])
        for sample in [4, 6]:
            for rep in [1, 2]:
                mask = (df.loc['Patient', :] == sample) & (df.loc['Section replicate'] == rep)
                df.loc[:, mask].iloc[2:, ].to_csv(os.path.join(params.outdir, "P{0}_rep{1}.counts.csv.gz".format(sample, rep)),
                                                  header=True, index=True, compression='gzip')


rule make_rowData:
    input:
        'data/cleaned/ji_GSE144239/{sample}.counts.csv.gz'
    output:
        "data/cleaned/ji_GSE144239/{sample}.rowData.csv"
    shell:
        """
        echo "gene_name" > {output};
        zcat {input} | cut -d"," -f1 | sed '1d' >> {output}
        """

rule make_colData:
    input:
        counts='data/cleaned/ji_GSE144239/{sample}.counts.csv.gz',
        positions='data/raw/ji_GSE144239/{sample}_tissue_positions_list.csv.gz'
    output:
        "data/cleaned/ji_GSE144239/{sample}.colData.csv"
    run:
        import pandas as pd
        counts = pd.read_csv(input.counts, index_col=0)
        names = 'in_tissue row col imagecol imagerow'.split()
        positions = pd.read_csv(input.positions, index_col=0, names=names)
        positions = positions.loc[counts.columns].copy()
        positions = positions.reset_index().rename(columns={'index': 'spot'})
        positions.to_csv(output[0], index=False, header=True)

rule make_RDS:
    input:
        counts='data/cleaned/ji_GSE144239/{sample}.counts.csv.gz',
        rowData="data/cleaned/ji_GSE144239/{sample}.rowData.csv",
        colData="data/cleaned/ji_GSE144239/{sample}.colData.csv",
    output:
        rds="data/cleaned/ji_GSE144239/{sample}.rds"
    shell:
        """
        ./scripts/make_RDS.R --sample {wildcards.sample} --dataset ji_GSE144239 \
            {input.counts} {input.rowData} {input.colData} {output.rds}
        """
